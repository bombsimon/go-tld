package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"strings"
	"text/template"
	"time"

	"github.com/bombsimon/tld-validator"
)

const (
	templateData = `package tld

/*
THIS FILE WAS AUTO GENERATED AT {{ .now }}

Do not edit this file, run "go generate" to re-generate this file with an
updated version of IANAs TLD list.
*/

import (
	"strings"
)

const (
{{ range $n, $t := .normalised -}}
	{{ $n }} TLD = "{{ $t.punicode }}"{{ if $t.is_punycode }} // {{ $t.unicode }} {{ end }}
{{ end -}}
)

// IsValid returns true if the TLD is a valid top level domain.
func (t TLD) IsValid() bool {
	maybePunycode := t.AsPunycode()

	switch strings.ToUpper(maybePunycode) {
	{{ range $t := .tlds -}}
	case "{{ $t -}}":
		return true
	{{ end -}}
	}

	return false
}`
)

func main() {
	var (
		iana       = tld.MustNewIANA()
		tlds       = iana.All()
		normalised = map[string]map[string]interface{}{}
	)

	for _, t := range tlds {
		n := strings.ReplaceAll(t.String(), "-", "_")
		normalised[n] = map[string]interface{}{
			"punicode":    t.String(),
			"unicode":     t.AsUnicode(),
			"is_punycode": t.LowerString() != t.AsUnicode(),
		}
	}

	args := map[string]interface{}{
		"tlds":       tlds,
		"normalised": normalised,
		"now":        time.Now().Format("2006-01-02 15:04:05"),
	}

	createFile(args)
}

func createFile(args map[string]interface{}) {
	tmpl := template.Must(template.New("").Parse(templateData))
	buf := bytes.Buffer{}

	if err := tmpl.Execute(&buf, args); err != nil {
		panic(err)
	}

	fileBytes, err := format.Source(buf.Bytes())
	if err != nil {
		panic(err)
	}

	newFile := "tld.gen.go"

	_ = ioutil.WriteFile(newFile, fileBytes, 0644)
	fmt.Printf("Generated file: %s\n", newFile)
}
